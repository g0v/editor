{"version":3,"sources":["utils/github.js","components/Form.js","App.js","config.js","serviceWorker.js","index.js"],"names":["Github","connection","owner","repo","this","ref","get","refs","commit","object","url","tree","content","post","data","JSON","stringify","encoding","base_tree","sha","path","filename","mode","type","blob","message","parents","branch","Date","now","title","body","head","base","author","Promise","resolve","reject","done","fail","useStyles","makeStyles","theme","inputContainer","marginBottom","spacing","formContainer","width","schema","G0vJSON","properties","formFields","Object","keys","map","key","index","item","enum","name","label","options","x","value","getOptionValue","option","getOptionLabel","disableCloseOnSelect","renderInput","params","placeholder","description","variant","required","FormPage","github","classes","useState","initialValues","setInitialValues","isSubmitting","setIsSubmitting","undefined","prUrl","setPrUrl","onSubmit","values","a","forEach","split","filter","createFork","createBlob","getReference","getCommit","getTree","baseTree","createTree","createCommit","newCommit","createReference","newCommitRef","createPullRequest","pr","html_url","openPrUrl","window","open","useEffect","queryParams","queryString","parse","location","search","fetch","res","ok","json","normalize","Array","isArray","join","render","handleSubmit","noValidate","className","Grid","container","direction","alignContent","justify","Button","color","onClick","disabled","OAuth","initialize","createMuiTheme","palette","primary","main","dark","contrastText","header","textAlign","backgroundColor","paddingTop","paddingBottom","headerTitle","fontFamily","fontSize","headerContent","margin","padding","App","setGithub","showHeader","setShowHeader","githubLogin","e","popup","user","login","console","error","hideHeader","autoLogin","src","alt","style","fontWeight","disableElevation","Form","Boolean","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.2fac5053.chunk.js","sourcesContent":["class Github {\n  constructor(connection, owner, repo) {\n    this.connection = connection;\n    this.owner = owner;\n    this.repo = repo;\n    return this;\n  }\n\n  getReference(ref) {\n    return this.connection.get(`/repos/${this.owner}/${this.repo}/git/refs/heads/${ref}`);\n  }\n\n  getCommit(refs) {\n    this.commit = this.connection.get(refs.object.url);\n    return this.commit;\n  }\n\n  getTree(commit) {\n    return this.connection.get(commit.tree.url);\n  }\n\n  createBlob(content) {\n    return this.connection.post(`/repos/${this.owner}/${this.repo}/git/blobs`, {\n      data: JSON.stringify({ content: content, encoding: 'utf-8' }),\n    });\n  }\n\n  createTree(base_tree) {\n    return this.connection.post(`/repos/${this.owner}/${this.repo}/git/trees`, {\n      data: JSON.stringify({\n        base_tree: base_tree.sha,\n        tree: [{ path: this.filename, mode: '100644', type: 'blob', sha: this.blob.sha }],\n      }),\n    });\n  }\n\n  createCommit(tree) {\n    return this.connection.post(`/repos/${this.owner}/${this.repo}/git/commits`, {\n      data: JSON.stringify({\n        message: `update ${this.filename}`,\n        tree: tree.sha,\n        parents: [this.commit.sha],\n      }),\n    });\n  }\n\n  createReference(commit) {\n    this.branch = `update-${this.filename}-${Date.now()}`;\n    const data = {\n      sha: commit.sha,\n      ref: `refs/heads/${this.branch}`,\n    };\n    return this.connection.post(`/repos/${this.owner}/${this.repo}/git/refs`, {\n      data: JSON.stringify(data),\n    });\n  }\n\n  createPullRequest(ref) {\n    const data = {\n      title: `update ${this.filename}`,\n      body: 'this is a pull request from g0v editor',\n      head: `${this.owner}:${this.branch}`,\n      base: 'master',\n    };\n    return this.connection.post(`/repos/${this.author}/${this.repo}/pulls`, {\n      data: JSON.stringify(data),\n    });\n  }\n\n  createFork() {\n    return new Promise((resolve, reject) => {\n      return this.connection.post(`/repos/${this.author}/${this.repo}/forks`)\n        .done(resolve).fail(reject);\n    });\n  }\n}\n\nexport default Github;\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport G0vJSON from 'g0v.json';\nimport queryString from 'query-string';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport { Form } from 'react-final-form';\nimport { TextField, Autocomplete } from 'mui-rff';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n  inputContainer: {\n    marginBottom: theme.spacing(2),\n  },\n  formContainer: {\n    width: '100%',\n  },\n}));\n\nconst schema = new G0vJSON('v1').schema().properties;\n\nconst formFields = Object.keys(schema).map((key, index) => {\n  const item = schema[key];\n  if (item.enum) {\n    return (\n      <Autocomplete\n        key={index}\n        name={key}\n        label={item.title}\n        options={item.enum.map((x) => ({ label: x, value: x }))}\n        getOptionValue={(option) => option.value}\n        getOptionLabel={(option) => option.label}\n        disableCloseOnSelect={false}\n        renderInput={(params) =><TextField {...params} label={item.title} placeholder={item.description} variant=\"outlined\" />}\n      />);\n  }\n\n  return (\n    <TextField\n      key={index}\n      name={key}\n      label={item.title}\n      variant={'outlined'}\n      placeholder={item.description}\n      required={item.required}\n    />\n  );\n});\n\nfunction FormPage({ github }) {\n  const classes = useStyles();\n  const [initialValues, setInitialValues] = useState({});\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [prUrl, setPrUrl] = useState(undefined);\n\n  const onSubmit = async (values) => {\n    setIsSubmitting(true);\n\n    const branch = 'master';\n\n    Object.keys(values).forEach((key)=>{\n      if (schema[key].type === 'array') {\n        values[key] = values[key].split(',').filter((x )=> x);\n      }\n    });\n\n    const data = JSON.stringify(values, null, '  ');\n\n    github.filename = 'g0v.json';\n    [github.author, github.repo] = values.repo.split('/');\n\n    await github.createFork();\n    github.blob = await github.createBlob(data);\n    const refs = await github.getReference(branch);\n    github.commit = await github.getCommit(refs);\n    const baseTree = await github.getTree(github.commit);\n    const tree = await github.createTree(baseTree);\n    const newCommit = await github.createCommit(tree);\n    const newCommitRef = await github.createReference(newCommit);\n    const pr = await github.createPullRequest(newCommitRef);\n    setPrUrl(pr.html_url);\n    setIsSubmitting(false);\n  };\n\n  const openPrUrl = ()=>{\n    window.open(prUrl, '_blank', 'noopener,noreferrer');\n  };\n\n  useEffect(() => {\n    (async () => {\n      const queryParams = queryString.parse(window.location.search);\n\n      let data = queryParams;\n      const { repo } = queryParams;\n      if (repo) {\n        const url = `https://raw.githubusercontent.com/${repo}/master/g0v.json`;\n        const res = await fetch(url);\n        if (res.ok) {\n          data = await res.json();\n        }\n      }\n\n      Object.keys(data).forEach((key) => {\n        if (!schema[key]) {\n          delete data[key];\n        } else\n        if (schema[key].type === 'string') {\n          data[key] = normalize(data[key]);\n        } else\n        if (schema[key].type === 'array') {\n          if (Array.isArray(data[key])) {\n            data[key] = data[key].map(normalize).join(',');\n          } else {\n            data[key] = normalize(data[key]);\n          }\n        }\n      });\n\n      if (repo) {\n        data.repo = repo;\n      }\n\n      setInitialValues(data);\n    })();\n  }, []);\n\n  return (<Form\n    onSubmit={onSubmit}\n    initialValues={initialValues}\n    render={({ handleSubmit }) => (\n      <form onSubmit={handleSubmit} noValidate className={classes.formContainer}>\n        <Grid container direction=\"column\" alignContent=\"stretch\">\n          {formFields.map((item, index) => (\n            <Grid item className={classes.inputContainer} key={index}>\n              {item}\n            </Grid>\n          ))}\n        </Grid>\n        <Grid container justify=\"center\">\n          {!prUrl ?\n            <Button color=\"primary\" variant=\"contained\" type=\"submit\" disabled={isSubmitting}>\n              建立 Pull Request\n            </Button>:\n            <Button color=\"primary\" variant=\"contained\" onClick={openPrUrl}>\n              前往 GitHub PR 頁面\n            </Button>\n          }\n        </Grid>\n      </form>\n    )} />\n  );\n}\n\nFormPage.propTypes = {\n  github: PropTypes.object.isRequired,\n};\n\nexport default FormPage;\n\nfunction normalize(value) {\n  if (typeof value === 'object') return JSON.stringify(value);\n\n  return value;\n}\n","import React, { useState, useEffect } from 'react';\nimport { OAuth } from 'oauthio-web';\nimport queryString from 'query-string';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport { makeStyles } from '@material-ui/core/styles';\n\nimport { oauthKey } from './config';\nimport Github from './utils/github';\n\nimport Form from './components/Form';\n\nOAuth.initialize(oauthKey);\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: '#05D4A6',\n      dark: '#05D4A6',\n      contrastText: '#fff',\n    },\n  },\n});\n\nconst useStyles = makeStyles((theme) => ({\n  header: {\n    width: '100%',\n    textAlign: 'center',\n    backgroundColor: '#F4F4F4',\n    paddingTop: 50,\n    paddingBottom: 50,\n  },\n  headerTitle: {\n    fontFamily: 'Helvetica',\n    fontSize: 24,\n    color: '#000000',\n  },\n  headerContent: {\n    margin: '0 auto',\n    width: 400,\n  },\n  container: {\n    padding: theme.spacing(2),\n    width: 500,\n    margin: '0 auto',\n  },\n}));\n\nfunction App() {\n  const classes = useStyles();\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [github, setGithub] = useState(null);\n  const [showHeader, setShowHeader] = useState(true);\n\n  const githubLogin = (e) => {\n    setIsSubmitting(true);\n    OAuth.popup('github')\n      .done((connection) => {\n        return connection.get('/user')\n          .done((user) => {\n            setIsSubmitting(false);\n            setGithub(new Github(connection, user.login));\n          });\n      })\n      .fail(console.error);\n  };\n\n  useEffect(() => {\n    const { hideHeader, autoLogin } = queryString.parse(window.location.search);\n    if (hideHeader) {\n      setShowHeader(false);\n    }\n    if (autoLogin) {\n      githubLogin();\n    }\n  }, []);\n\n  return (\n    <MuiThemeProvider theme={theme}>\n      {showHeader &&\n        <div className={classes.header}>\n          <img src=\"logo.png\" alt=\"logo\"/>\n          <h1 className={classes.headerTitle}>g0v metadata editor</h1>\n          <p className={classes.headerContent}>\n            The form below will help you build a valid g0v.json file.\n            Fill out all of the required fields (marked by a star) and any others.\n            Next, you can click the buttons at the bottom of the page to render and create a Pull Request to target repository.\n          </p>\n        </div>}\n      <Grid container justify=\"center\" className={classes.container}>\n        {!github &&\n          <Button\n            color=\"primary\"\n            variant=\"contained\"\n            onClick={githubLogin}\n            style={{ fontWeight: 'bold' }}\n            disabled={isSubmitting}\n            disableElevation={true}\n          >\n            用 github 登入以建立 Pull Request\n          </Button>}\n        {github && <Form github={github}/>}\n      </Grid>\n    </MuiThemeProvider>);\n}\n\nexport default App;\n","export const oauthKey = 'M-bBVCTcOy9vIq7TRkJoL17N6LQ';\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/,\n    ),\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA',\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.',\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.',\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}